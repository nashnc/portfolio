// Security utilities for production environment

export const initSecurityMeasures = () => {
  // Only apply security measures in production
  if (process.env.NODE_ENV !== "production") {
    console.log("Security measures disabled in development mode");
    return;
  }

  // Disable right-click
  const handleContextMenu = (e) => {
    e.preventDefault();
    return false;
  };

  // Disable F12, Ctrl+Shift+I, Ctrl+Shift+J, Ctrl+U
  const handleKeyDown = (e) => {
    if (
      e.keyCode === 123 || // F12
      (e.ctrlKey && e.shiftKey && e.keyCode === 73) || // Ctrl+Shift+I
      (e.ctrlKey && e.shiftKey && e.keyCode === 74) || // Ctrl+Shift+J
      (e.ctrlKey && e.keyCode === 85) // Ctrl+U
    ) {
      e.preventDefault();
      return false;
    }
  };

  // Disable text selection
  const handleSelectStart = (e) => {
    // Allow text selection in input fields and textareas
    if (e.target.tagName !== "INPUT" && e.target.tagName !== "TEXTAREA") {
      e.preventDefault();
      return false;
    }
  };

  // Disable image dragging
  const handleDragStart = (e) => {
    if (e.target.tagName === "IMG") {
      e.preventDefault();
      return false;
    }
  };

  // Add event listeners
  document.addEventListener("contextmenu", handleContextMenu);
  document.addEventListener("keydown", handleKeyDown);
  document.addEventListener("selectstart", handleSelectStart);
  document.addEventListener("dragstart", handleDragStart);

  console.log("Security measures enabled in production mode");

  // Return cleanup function if needed
  return () => {
    document.removeEventListener("contextmenu", handleContextMenu);
    document.removeEventListener("keydown", handleKeyDown);
    document.removeEventListener("selectstart", handleSelectStart);
    document.removeEventListener("dragstart", handleDragStart);
  };
};
